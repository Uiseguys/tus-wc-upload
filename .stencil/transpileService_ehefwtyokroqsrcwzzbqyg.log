{"moduleFile":{"sourceFilePath":"/home/users/ajayveer/Music/stencil/my-app/src/components/file-chooser/file-chooser.tsx","localImports":[],"externalImports":["@stencil/core","tus-js-client"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"cwc-file-chooser","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/users/ajayveer/Music/stencil/my-app/src/components/file-chooser/file-chooser.css","cmpRelativePath":"file-chooser.css","originalComponentPath":"file-chooser.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AppHome","documentation":"","type":"typeof AppHome"},"encapsulationMeta":0,"componentClass":"AppHome","membersMeta":{"file":{"memberType":16},"uppy":{"memberType":16},"error":{"memberType":16},"currentFiles":{"memberType":16},"allowDrop":{"memberType":1,"attribName":"allow-drop","attribType":{"text":"String","optional":false,"typeReferences":{"String":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"allowDrop","documentation":"","type":"String"}},"allowClick":{"memberType":1,"attribName":"allow-click","attribType":{"text":"String","optional":false,"typeReferences":{"String":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"allowClick","documentation":"","type":"String"}},"allowMultiple":{"memberType":1,"attribName":"allow-multiple","attribType":{"text":"String","optional":false,"typeReferences":{"String":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"allowMultiple","documentation":"","type":"String"}},"accept":{"memberType":1,"attribName":"accept","attribType":{"text":"String[]","optional":false,"typeReferences":{"String":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"accept","documentation":"","type":"String[]"}},"serverAddress":{"memberType":1,"attribName":"server-address","attribType":{"text":"String","optional":false,"typeReferences":{"String":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"serverAddress","documentation":"","type":"String"}}},"eventsMeta":[{"eventMethodName":"filesChosen","eventName":"filesChosen","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"jsdoc":{"name":"filesChosen","documentation":"","type":"EventEmitter<any>"}}],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/users/ajayveer/Music/stencil/my-app/src/components/file-chooser/file-chooser.js"},"jsText":"// declare var tus;\r\nexport class AppHome {\r\n    constructor() {\r\n        this.allowDrop = \"true\";\r\n        this.allowClick = \"true\";\r\n        this.allowMultiple = \"true\";\r\n        this.accept = null;\r\n        this.serverAddress = \"\";\r\n        this.file = [];\r\n        this.error = [];\r\n        this.currentFiles = [];\r\n    }\r\n    componentDidLoad() {\r\n        if (this.allowMultiple == \"true\") {\r\n            this.uppy = Uppy.Core({\r\n                debug: true,\r\n                autoProceed: true,\r\n                restrictions: {\r\n                    maxNumberOfFiles: null,\r\n                    allowedFileTypes: this.accept\r\n                },\r\n            });\r\n        }\r\n        else {\r\n            this.uppy = Uppy.Core({\r\n                debug: true,\r\n                autoProceed: true,\r\n                restrictions: {\r\n                    maxNumberOfFiles: 1,\r\n                    allowedFileTypes: this.accept\r\n                },\r\n            });\r\n        }\r\n        this.initDragDropArea();\r\n        this.addedFiles();\r\n        this.uploadFiles();\r\n        this.progressBarHandler();\r\n        this.errorHandler();\r\n        this.uploadSuccess();\r\n    }\r\n    initDragDropArea() {\r\n        if (this.allowDrop == \"true\" && this.allowClick == \"true\") {\r\n            let stringsText = this.allowMultiple == \"true\" ? \"Please drop files here or \" : \"Please drop file or \";\r\n            // Generate the Drop Box\r\n            this.uppy.use(Uppy.DragDrop, {\r\n                target: '#drag-drop-area',\r\n                width: '100%',\r\n                height: '100%',\r\n                note: null,\r\n                locale: {\r\n                    strings: {\r\n                        dropHereOr: stringsText + '%{browse}',\r\n                        browse: 'select'\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        else if (this.allowDrop == \"true\" && this.allowClick == \"false\") {\r\n            let stringsText = this.allowMultiple == \"true\" ? \"Please drop files\" : \"Please drop file\";\r\n            // Generate the Drop Box\r\n            this.uppy.use(Uppy.DragDrop, {\r\n                target: '#drag-drop-area',\r\n                width: '100%',\r\n                height: '100%',\r\n                note: null,\r\n                locale: {\r\n                    strings: {\r\n                        dropHereOr: '',\r\n                    }\r\n                }\r\n            });\r\n            // Add the Watermark\r\n            var node = document.createElement(\"h6\");\r\n            var textnode = document.createTextNode(stringsText);\r\n            node.classList.add(\"water-mark\");\r\n            node.appendChild(textnode);\r\n            document.getElementById(\"drag-drop-area\").appendChild(node);\r\n        }\r\n        else if (this.allowDrop == \"false\" && this.allowClick == \"true\") {\r\n            // let stringsText = this.allowMultiple == \"true\" ? \"Please drop files here or \" : \"Please drop file or \"\r\n            this.error = [...this.error, \"Under Development\"];\r\n        }\r\n        else {\r\n            let stringsText = \"Please allow drop or allow Click\";\r\n            // Generate the Drop Box\r\n            this.uppy.use(Uppy.DragDrop, {\r\n                target: '#drag-drop-area',\r\n                width: '100%',\r\n                height: '100%',\r\n                note: null,\r\n                locale: {\r\n                    strings: {\r\n                        dropHereOr: stringsText,\r\n                    }\r\n                }\r\n            });\r\n            // Disable the drop and click\r\n            document.getElementById(\"drag-drop-area\").style.pointerEvents = \"none\";\r\n        }\r\n    }\r\n    // handleChange(e) {\r\n    //   for (let i = 0; i < e.target.files.length; i++) {\r\n    //     var file = e.target.files[i]\r\n    //     var upload = new tus.Upload(file, {\r\n    //       endpoint: this.serverAddress,\r\n    //       retryDelays: [0, 1000, 3000, 5000],\r\n    //       metadata: {\r\n    //         filename: file.name,\r\n    //         filetype: file.type\r\n    //       },\r\n    //       onError: function (error) {\r\n    //         console.log(\"Failed because: \" + error)\r\n    //       },\r\n    //       onProgress: function (bytesUploaded, bytesTotal) {\r\n    //         var percentage = (bytesUploaded / bytesTotal * 100).toFixed(2)\r\n    //         console.log(bytesUploaded, bytesTotal, percentage + \"%\")\r\n    //       },\r\n    //       onSuccess: function () {\r\n    //         console.log(\"Download %s from %s\", upload.file.name, upload.url)\r\n    //       }\r\n    //     })\r\n    //     console.log(upload)\r\n    //     // Start the upload\r\n    //     upload.start()\r\n    //     // upload.abort()\r\n    //   }\r\n    // }\r\n    addedFiles() {\r\n        this.uppy.on('file-added', (file) => {\r\n            file['pause'] = false;\r\n            file['uploaded'] = false;\r\n            let randonId = \"a\" + Math.round(Math.random() * 10000);\r\n            file['progressBarId'] = randonId;\r\n            this.currentFiles = [...this.currentFiles, file];\r\n            console.log(\"File\");\r\n            console.log(file);\r\n            let progressBar = document.getElementById(\"myProgress-bars\");\r\n            let bar = document.createElement(\"span\");\r\n            bar.id = randonId;\r\n            progressBar.appendChild(bar);\r\n            this.trackProgress();\r\n        });\r\n    }\r\n    uploadFiles() {\r\n        this.uppy.use(Uppy.Tus, {\r\n            endpoint: this.serverAddress,\r\n            resume: true,\r\n            autoRetry: true,\r\n            retryDelays: [0, 1000, 3000, 5000]\r\n        });\r\n    }\r\n    uploadSuccess() {\r\n        this.uppy.on('upload-success', (file, uploadURL) => {\r\n            console.log(file);\r\n            let index = this.currentFiles.findIndex(x => x.id == file.id);\r\n            if (index > -1) {\r\n                this.currentFiles[index].uploaded = true;\r\n            }\r\n            if (uploadURL.file.type == \"image/png\" ||\r\n                uploadURL.file.type == \"image/jpg\" ||\r\n                uploadURL.file.type == \"image/jpeg\" ||\r\n                uploadURL.file.type == \"image/svg\") {\r\n                var img = document.createElement(\"img\");\r\n                img.src = uploadURL.url;\r\n                let body = document.getElementById(\"image-list\");\r\n                body.appendChild(img);\r\n            }\r\n        });\r\n    }\r\n    progressBarHandler() {\r\n        const StatusBar = Uppy.StatusBar;\r\n        this.uppy.use(StatusBar, {\r\n            target: '.UppyInput-Progress',\r\n            fixed: true,\r\n            hideAfterFinish: false,\r\n            hideUploadButton: true\r\n        });\r\n    }\r\n    errorHandler() {\r\n        let timer;\r\n        this.uppy.on('info-visible', () => {\r\n            const info = this.uppy.getState().info;\r\n            clearInterval(timer);\r\n            this.error = [...this.error, info.message];\r\n        });\r\n        this.uppy.on('upload-error', (error) => {\r\n            clearInterval(timer);\r\n            this.error = [...this.error, error];\r\n        });\r\n        timer = setInterval(() => {\r\n            this.error = [];\r\n        }, 3000);\r\n    }\r\n    playPauseDownloading(file, i) {\r\n        // let index = this.currentFiles.findIndex(x => x.id == file.id)\r\n        this.currentFiles[i].pause = !this.currentFiles[i].pause;\r\n        this.uppy.pauseResume(file.id);\r\n    }\r\n    trackProgress() {\r\n        this.uppy.on('upload-progress', (file, progress) => {\r\n            console.log(file);\r\n            let index = this.currentFiles.findIndex(x => x.id == file.id);\r\n            if (index > -1) {\r\n                this.currentFiles[index].progress.percentage = (progress.bytesUploaded * 100) / progress.bytesTotal;\r\n                this.currentFiles[index].progress.bytesUploaded = progress.bytesUploaded;\r\n                // this.move(this.currentFiles[index].progressBarId, this.currentFiles[index].progress.percentage)\r\n            }\r\n        });\r\n    }\r\n    move(id, width) {\r\n        var elem = document.getElementById(id);\r\n        if (width <= 100) {\r\n            elem.style.width = width + '%';\r\n        }\r\n    }\r\n    render() {\r\n        var resumeButton = \"<img src='https://png.icons8.com/metro/1600/play.png' >\";\r\n        var pauseButton = \"<img src='https://cdn3.iconfinder.com/data/icons/multimedia/100/pause-512.png'/>\";\r\n        var check = \"<img src='/assets/icon/checkmark-png-28.png' />\";\r\n        return ([\r\n            h(\"div\", { class: \"cwc-file-chooser\" },\r\n                h(\"div\", { id: \"drag-drop-area\" }),\r\n                this.currentFiles.map((file, i) => h(\"div\", { class: \"progress-list\" },\r\n                    h(\"div\", { class: \"file-name\" }, file.name),\r\n                    h(\"div\", { id: \"myProgress-bars\" }),\r\n                    file.uploaded ?\r\n                        h(\"div\", { class: \"progress-footer\" },\r\n                            h(\"button\", { class: \"play-pause-btn\", innerHTML: check }),\r\n                            h(\"span\", null, \"Complete\"))\r\n                        :\r\n                            h(\"div\", { class: \"progress-footer\" },\r\n                                h(\"button\", { class: \"play-pause-btn\", onClick: () => this.playPauseDownloading(file, i), innerHTML: file.pause == true ? resumeButton : pauseButton }),\r\n                                h(\"span\", null,\r\n                                    \" \",\r\n                                    file.pause == true ? \"Paused\" : \"Uploading\",\r\n                                    \" : \",\r\n                                    Math.round(file.progress.percentage),\r\n                                    \"%\")))),\r\n                h(\"ul\", null, this.error.map((err) => h(\"li\", null, err))),\r\n                h(\"div\", { id: \"image-list\" }))\r\n        ]);\r\n    }\r\n    static get is() { return \"cwc-file-chooser\"; }\r\n    static get properties() { return {\r\n        \"accept\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"accept\"\r\n        },\r\n        \"allowClick\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"allow-click\"\r\n        },\r\n        \"allowDrop\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"allow-drop\"\r\n        },\r\n        \"allowMultiple\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"allow-multiple\"\r\n        },\r\n        \"currentFiles\": {\r\n            \"state\": true\r\n        },\r\n        \"error\": {\r\n            \"state\": true\r\n        },\r\n        \"file\": {\r\n            \"state\": true\r\n        },\r\n        \"serverAddress\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"server-address\"\r\n        },\r\n        \"uppy\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"filesChosen\",\r\n            \"method\": \"filesChosen\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:cwc-file-chooser:**/\"; }\r\n}\r\n"}