{"moduleFile":{"sourceFilePath":"/home/users/ajayveer/Music/uploadlibrarynode/src/components/file-uploader/file-uploader.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"cwc-upload-item","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/users/ajayveer/Music/uploadlibrarynode/src/components/file-uploader/file-uploader.css","cmpRelativePath":"file-uploader.css","originalComponentPath":"file-uploader.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AppUploader","documentation":"","type":"typeof AppUploader"},"encapsulationMeta":0,"componentClass":"AppUploader","membersMeta":{"currentFile":{"memberType":16},"uploadObj":{"memberType":16},"errors":{"memberType":16},"refreshState":{"memberType":16},"timer":{"memberType":16},"barCTX":{"memberType":16},"canvasId":{"memberType":16},"fileProvided":{"memberType":1,"attribName":"file-provided","attribType":{"text":"any","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":1,"jsdoc":{"name":"fileProvided","documentation":"","type":"any"}},"endpoint":{"memberType":1,"attribName":"endpoint","attribType":{"text":"String","optional":false,"typeReferences":{"String":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"endpoint","documentation":"","type":"String"}},"file":{"memberType":1,"attribName":"file","attribType":{"text":"string","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"file","documentation":"","type":"string"}},"upload":{"memberType":2,"attribName":"upload","attribType":{"text":"boolean","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"upload","documentation":"","type":"boolean"}},"value":{"memberType":1,"attribName":"value","attribType":{"text":"string","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"value","documentation":"","type":"string"}},"indicator":{"memberType":1,"attribName":"indicator","attribType":{"text":"string","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"indicator","documentation":"","type":"string"}}},"eventsMeta":[{"eventMethodName":"error","eventName":"error","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"jsdoc":{"name":"error","documentation":"","type":"EventEmitter<any>"}},{"eventMethodName":"cancelEvent","eventName":"cancelEvent","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"jsdoc":{"name":"cancelEvent","documentation":"","type":"EventEmitter<any>"}},{"eventMethodName":"progress","eventName":"progress","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"jsdoc":{"name":"progress","documentation":"","type":"EventEmitter<any>"}},{"eventMethodName":"save","eventName":"save","eventBubbles":true,"eventCancelable":true,"eventComposed":true,"jsdoc":{"name":"save","documentation":"","type":"EventEmitter<any>"}}],"listenersMeta":[]},"hasSlot":true,"hasSvg":false,"jsFilePath":"/home/users/ajayveer/Music/uploadlibrarynode/src/components/file-uploader/file-uploader.js"},"jsText":"// declare var $;\r\nexport class AppUploader {\r\n    constructor() {\r\n        this.endpoint = \"\";\r\n        this.file = \"Blob\";\r\n        this.upload = true;\r\n        this.value = \"\";\r\n        this.indicator = \"circular\";\r\n        this.errors = \"\";\r\n        this.refreshState = {};\r\n        this.canvasId = Math.round(Math.random() * 111111).toString();\r\n    }\r\n    componentDidLoad() {\r\n        // When we got existed file\r\n        if (this.fileProvided.uploadObj) {\r\n            this.uploadObj = this.fileProvided.uploadObj;\r\n            if (this.fileProvided.progress == 100) {\r\n                this.currentFile = this.uploadObj.file;\r\n                this.uploadSuccess();\r\n            }\r\n            else {\r\n                this.currentFile = this.fileProvided;\r\n                // Refresh the state\r\n                this.timer = setInterval(() => {\r\n                    this.refreshState = Object.assign({}, this.refreshState);\r\n                    this.drawProgress(this.activeProgress, this.currentFile.progress.percentage / 100);\r\n                }, 1000);\r\n            }\r\n            // Draw the progress in circular \r\n            this.drawProgressMain();\r\n        }\r\n        else {\r\n            // When we have new file\r\n            this.init(this.fileProvided);\r\n        }\r\n    }\r\n    /**\r\n     * Initialise the new file\r\n     * @param file\r\n     */\r\n    init(file) {\r\n        file['pause'] = false;\r\n        file['uploaded'] = false;\r\n        file['progress'] = { bytesUploaded: 0, bytesTotal: file.size, percentage: 0 };\r\n        file['id'] = Date.now().toString() + file.name;\r\n        this.currentFile = file;\r\n        this.placeholderImage(file, file.type);\r\n        // check for the auto upload\r\n        if (this.upload == true) {\r\n            this.startUploads();\r\n        }\r\n        else {\r\n            this.currentFile.pause = true;\r\n            this.uploader(this.currentFile);\r\n        }\r\n    }\r\n    // start the upload\r\n    startUploads() {\r\n        this.upload = true;\r\n        this.uploader(this.currentFile);\r\n    }\r\n    /**\r\n     * File uploader\r\n     * @param file\r\n     */\r\n    uploader(file) {\r\n        this.drawProgressMain();\r\n        let self = this;\r\n        this.uploadObj = new tus.Upload(file, {\r\n            endpoint: this.endpoint,\r\n            retryDelays: [0, 1000],\r\n            metadata: {\r\n                filename: file.name,\r\n                filetype: file.type\r\n            },\r\n            onError: function (error) {\r\n                self.errorHandler(error);\r\n            },\r\n            onProgress: function (bytesUploaded, bytesTotal) {\r\n                var percentage = (Math.round((bytesUploaded * 100) / bytesTotal));\r\n                self.progressHandler(percentage);\r\n            },\r\n            onSuccess: function () {\r\n                self.uploadSuccess();\r\n            }\r\n        });\r\n        // check for the upload status\r\n        if (file.pause == false) {\r\n            this.uploadObj.start();\r\n        }\r\n        this.save.emit(this.uploadObj);\r\n    }\r\n    /**\r\n     * Handle the progress of the upload\r\n     * @param percentage\r\n     */\r\n    progressHandler(percentage) {\r\n        this.drawProgress(this.activeProgress, percentage / 100);\r\n        this.currentFile.progress.percentage = percentage;\r\n        this.uploadObj.file = this.currentFile;\r\n        this.refreshState = !this.refreshState;\r\n        this.progress.emit(this.currentFile);\r\n    }\r\n    /**\r\n     * Display the upload completion\r\n     */\r\n    uploadSuccess() {\r\n        this.currentFile.uploaded = true;\r\n        this.refreshState = !this.refreshState;\r\n        clearInterval(this.timer);\r\n    }\r\n    /**\r\n     * Handle Error in uploading\r\n     * @param error\r\n     */\r\n    errorHandler(error) {\r\n        console.log(error);\r\n        this.currentFile.pause = true;\r\n        this.refreshState = !this.refreshState;\r\n        this.errors = \"We got a server error, Please try again.\";\r\n        let timer;\r\n        clearInterval(timer);\r\n        timer = setTimeout(() => {\r\n            this.errors = \"\";\r\n        }, 30000);\r\n        this.error.emit(this.errors);\r\n    }\r\n    /**\r\n     * Handle Resume or Pause of the upload\r\n     */\r\n    resumeAbortUploading() {\r\n        if (this.upload == true) {\r\n            this.currentFile.pause = !this.currentFile.pause;\r\n            if (this.currentFile.pause == true) {\r\n                this.uploadObj.abort();\r\n            }\r\n            else {\r\n                this.uploadObj.start();\r\n            }\r\n        }\r\n        else {\r\n            this.currentFile.pause = false;\r\n            this.uploader(this.currentFile);\r\n        }\r\n        if (this.errors != \"\") {\r\n            this.errors = \"\";\r\n            this.save.emit(this.uploadObj);\r\n        }\r\n        this.refreshState = !this.refreshState;\r\n    }\r\n    /**\r\n     * cancel the file upload\r\n     */\r\n    cancelUpload() {\r\n        this.uploadObj.abort();\r\n        this.refreshState = !this.refreshState;\r\n        this.cancelEvent.emit(this.currentFile);\r\n    }\r\n    /**\r\n     * Get the image for preview\r\n     * @param file\r\n     * @param type\r\n     */\r\n    placeholderImage(file, type) {\r\n        let [first] = type.split('/');\r\n        if (first == \"image\") {\r\n            this.getBase64(file);\r\n        }\r\n        else {\r\n            this.currentFile.src = \"https://svn.alfresco.com/repos/alfresco-open-mirror/alfresco/HEAD/root/projects/repository/config/alfresco/thumbnail/thumbnail_placeholder_256.png\";\r\n        }\r\n    }\r\n    /**\r\n     * Convert the Blob file to base64\r\n     * @param file\r\n     */\r\n    getBase64(file) {\r\n        var reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        let self = this;\r\n        reader.onload = function () {\r\n            self.currentFile.src = reader.result;\r\n        };\r\n        reader.onerror = function (error) {\r\n            console.log(error);\r\n        };\r\n    }\r\n    /**\r\n     * This create the progress bar in circular\r\n     */\r\n    drawProgressMain() {\r\n        // $(document).ready(function () {\r\n        var iProgress = document.getElementById('inactiveProgress' + this.canvasId);\r\n        this.activeProgress = document.getElementById('activeProgress' + this.canvasId);\r\n        var iProgressCTX = iProgress.getContext('2d');\r\n        this.drawInactive(iProgressCTX);\r\n        // }.bind(this));\r\n    }\r\n    /**\r\n     * Draw the inactive faseed circle\r\n     * @param iProgressCTX\r\n     */\r\n    drawInactive(iProgressCTX) {\r\n        iProgressCTX.lineCap = 'square';\r\n        //progress bar\r\n        iProgressCTX.beginPath();\r\n        iProgressCTX.lineWidth = 0;\r\n        iProgressCTX.fillStyle = '#e6e6e6';\r\n        iProgressCTX.arc(75, 75, 74, 0, 2 * Math.PI);\r\n        iProgressCTX.fill();\r\n        //progressbar caption\r\n        iProgressCTX.beginPath();\r\n        iProgressCTX.lineWidth = 0;\r\n        iProgressCTX.fillStyle = '#fff';\r\n        iProgressCTX.arc(75, 75, 67, 0, 2 * Math.PI);\r\n        iProgressCTX.fill();\r\n    }\r\n    /**\r\n     * Drow the progress\r\n     * @param bar\r\n     * @param percentage\r\n     */\r\n    drawProgress(bar, percentage) {\r\n        var barCTX = bar.getContext(\"2d\");\r\n        var quarterTurn = Math.PI / 2;\r\n        var endingAngle = ((2 * percentage) * Math.PI) - quarterTurn;\r\n        var startingAngle = 0 - quarterTurn;\r\n        bar.width = bar.width;\r\n        barCTX.lineCap = 'square';\r\n        barCTX.beginPath();\r\n        barCTX.lineWidth = 6;\r\n        barCTX.strokeStyle = '#00B4FF';\r\n        barCTX.arc(75, 75, 70, startingAngle, endingAngle);\r\n        barCTX.stroke();\r\n    }\r\n    render() {\r\n        var resumeButton = \"<img src='/assets/icon/upload-button.svg' >\";\r\n        var pauseButton = \"<img src='/assets/icon/pause.svg'/>\";\r\n        var check = \"<img src='/assets/icon/checked.svg' />\";\r\n        var indicator = this.indicator === \"circular\" ? \"unset\" : \"none\";\r\n        return (h(\"div\", { class: \"st_wid_100\", style: { width: \"auto\" } },\r\n            h(\"div\", { id: \"page\", class: \"page\", style: { display: indicator } },\r\n                h(\"div\", null, this.endpoint == \"\" ? \"No endpoint given.\" : this.upload == false ? \"Ready to upload\" :\r\n                    null),\r\n                h(\"slot\", { name: \"progress\" },\r\n                    h(\"div\", { class: \"progress-bar\" },\r\n                        h(\"canvas\", { id: \"inactiveProgress\" + this.canvasId, class: \"progress-inactive\", width: 150, height: 150 }),\r\n                        h(\"canvas\", { id: \"activeProgress\" + this.canvasId, class: \"progress-active\", width: 150, height: 150 }),\r\n                        h(\"p\", { class: \"progress-text\" },\r\n                            this.currentFile ? this.currentFile.progress.percentage + \"%\" : \"loading\",\r\n                            h(\"br\", null),\r\n                            h(\"span\", null, \"uploading\")))),\r\n                this.currentFile ?\r\n                    h(\"div\", { class: \"bottm_sec\" },\r\n                        this.currentFile.uploaded == true ?\r\n                            h(\"a\", { class: \"pouse_btn btm_in\", innerHTML: check })\r\n                            : this.currentFile.pause == true ?\r\n                                h(\"a\", { class: \"pouse_btn btm_in\", innerHTML: resumeButton, onClick: () => this.resumeAbortUploading() }, \" \")\r\n                                : h(\"a\", { class: \"pouse_btn btm_in\", innerHTML: pauseButton, onClick: () => this.resumeAbortUploading() }),\r\n                        h(\"p\", { class: \"btm_in\" }, \"file1.jpg\"),\r\n                        h(\"div\", { class: \"clos btm_in\" },\r\n                            h(\"img\", { src: \"/assets/icon/circle-close.png\" })))\r\n                    : null),\r\n            this.currentFile ?\r\n                this.indicator == \"linear\" ?\r\n                    h(\"div\", { class: \"st_allContent\" },\r\n                        h(\"div\", null, this.endpoint == \"\" ? \"No endpoint given.\" : this.upload == false ? \"Ready to upload\" :\r\n                            null),\r\n                        h(\"slot\", { name: \"file-preview\" },\r\n                            h(\"div\", { class: \"st_image\" },\r\n                                h(\"img\", { src: this.currentFile.src, class: \"st_wid_100\" }),\r\n                                this.errors ? h(\"div\", { class: \"overlay_error\" },\r\n                                    \" \",\r\n                                    this.errors,\r\n                                    \" \") : null)),\r\n                        h(\"div\", { class: \"st_barVDOcancel st_w_100\" },\r\n                            h(\"div\", { class: \"st_row st_bg\" },\r\n                                h(\"div\", { class: \"st_wid_15 tick\" }, this.currentFile.uploaded == true ?\r\n                                    h(\"a\", { class: \"st_closeBtn\", innerHTML: check })\r\n                                    : this.currentFile.pause == true ?\r\n                                        h(\"a\", { class: \"st_closeBtn\", innerHTML: resumeButton, onClick: () => this.resumeAbortUploading() }, \" \")\r\n                                        : h(\"a\", { class: \"st_closeBtn\", innerHTML: pauseButton, onClick: () => this.resumeAbortUploading() })),\r\n                                h(\"div\", { class: \"st_right_sec\" },\r\n                                    h(\"div\", { class: \"file_name\" },\r\n                                        h(\"p\", { class: \"upload-name\" },\r\n                                            \"  \",\r\n                                            this.currentFile.name.slice(0, 15)),\r\n                                        h(\"div\", { class: \"st_wid_18\" },\r\n                                            h(\"a\", { class: \"fnt-14\" },\r\n                                                this.currentFile.progress.percentage,\r\n                                                \"%\"))),\r\n                                    h(\"div\", { class: \"st_wid_52\" },\r\n                                        h(\"slot\", { name: \"progress\" },\r\n                                            h(\"div\", { class: \"st_progress-bar\" },\r\n                                                h(\"div\", { class: \"st_loaded\", style: { width: (this.currentFile.progress.percentage + '%') } })))),\r\n                                    h(\"div\", { class: \"st_wid_15 cancel\", onClick: () => this.cancelUpload() },\r\n                                        h(\"slot\", { name: \"cancel-Button\" },\r\n                                            h(\"a\", { class: \"st_closeBtn\" },\r\n                                                h(\"img\", { src: \"/assets/icon/close-circle.svg\" }))))))))\r\n                    :\r\n                        null\r\n                : null));\r\n    }\r\n    static get is() { return \"cwc-upload-item\"; }\r\n    static get properties() { return {\r\n        \"barCTX\": {\r\n            \"state\": true\r\n        },\r\n        \"canvasId\": {\r\n            \"state\": true\r\n        },\r\n        \"currentFile\": {\r\n            \"state\": true\r\n        },\r\n        \"endpoint\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"endpoint\"\r\n        },\r\n        \"errors\": {\r\n            \"state\": true\r\n        },\r\n        \"file\": {\r\n            \"type\": String,\r\n            \"attr\": \"file\"\r\n        },\r\n        \"fileProvided\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"file-provided\"\r\n        },\r\n        \"indicator\": {\r\n            \"type\": String,\r\n            \"attr\": \"indicator\"\r\n        },\r\n        \"refreshState\": {\r\n            \"state\": true\r\n        },\r\n        \"timer\": {\r\n            \"state\": true\r\n        },\r\n        \"upload\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"upload\",\r\n            \"mutable\": true\r\n        },\r\n        \"uploadObj\": {\r\n            \"state\": true\r\n        },\r\n        \"value\": {\r\n            \"type\": String,\r\n            \"attr\": \"value\"\r\n        }\r\n    }; }\r\n    static get events() { return [{\r\n            \"name\": \"error\",\r\n            \"method\": \"error\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"cancelEvent\",\r\n            \"method\": \"cancelEvent\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"progress\",\r\n            \"method\": \"progress\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }, {\r\n            \"name\": \"save\",\r\n            \"method\": \"save\",\r\n            \"bubbles\": true,\r\n            \"cancelable\": true,\r\n            \"composed\": true\r\n        }]; }\r\n    static get style() { return \"/**style-placeholder:cwc-upload-item:**/\"; }\r\n}\r\n"}