/*! Built with http://stenciljs.com */
import { h } from '../app.core.js';
var AppChooser = /** @class */ (function () {
    function AppChooser() {
        this.allowDrop = true;
        this.allowClick = true;
        this.allowMultiple = true;
        this.accept = [];
        this.error = [];
        this.stringsText = "";
    }
    AppChooser.prototype.componentDidLoad = function () {
        this.initDragDropArea();
    };
    AppChooser.prototype.initDragDropArea = function () {
        if (this.allowDrop == true && this.allowClick == true) {
            this.stringsText = this.allowMultiple == true ? "Please drop files here or " : "Please drop file or ";
        }
        else if (this.allowDrop == true && this.allowClick == false) {
            this.stringsText = this.allowMultiple == true ? "Please drop files" : "Please drop file";
        }
        else if (this.allowDrop == false && this.allowClick == true) {
            this.stringsText = "";
        }
        else {
            this.stringsText = "Please allow drop or allow Click";
        }
    };
    AppChooser.prototype.handleChange = function (e) {
        this.addedFiles(e.target.files);
    };
    AppChooser.prototype.drop = function (e) {
        e.preventDefault();
        if (this.allowMultiple == true) {
            this.addedFiles(e.dataTransfer.files);
        }
        else {
            if (e.dataTransfer.files.length > 1) {
                this.errorHandler("You can upload single file at a time.");
                var passedFiles = [];
                passedFiles = passedFiles.concat([e.dataTransfer.files[0]]);
                this.addedFiles(passedFiles);
            }
            else {
                this.addedFiles(e.dataTransfer.files);
            }
        }
    };
    AppChooser.prototype.addedFiles = function (files) {
        var hit;
        if (this.accept == [] || this.accept.length == 0 || this.accept == null) {
            this.filesChosen.emit(files);
        }
        else {
            var checkedFile = [];
            for (var j = 0; j < files.length; j++) {
                hit = false;
                for (var i = 0; i < this.accept.length; i++) {
                    if (this.formatValidator(this.accept[i], files[j].type) == true) {
                        hit = true;
                        checkedFile = checkedFile.concat([files[j]]);
                        break;
                    }
                }
                if (hit == false) {
                    this.errorHandler("Please select the file of required format.");
                }
            }
            this.filesChosen.emit(checkedFile);
        }
    };
    AppChooser.prototype.formatValidator = function (accept, incoming) {
        accept = accept.slice(accept.indexOf(".") + 1, accept.length);
        incoming = incoming.slice(incoming.indexOf("/") + 1, incoming.length);
        if (accept == incoming) {
            return true;
        }
        else {
            return false;
        }
    };
    AppChooser.prototype.allowDropFile = function (ev) {
        if (this.allowDrop == true) {
            ev.preventDefault();
        }
    };
    AppChooser.prototype.errorHandler = function (error) {
        var _this = this;
        this.error = this.error.concat([error]);
        var timer;
        clearInterval(timer);
        timer = setInterval(function () {
            _this.error = [];
        }, 5000);
    };
    AppChooser.prototype.render = function () {
        var _this = this;
        var multiple = this.allowMultiple == true ? true : false;
        return ([
            h("div", { class: "st_container" }, h("div", { class: "st_top_50 dashed-border", onDrop: function (e) { return _this.drop(e); }, onDragOver: function (e) { return _this.allowDropFile(e); } }, h("div", { class: "st_file_contain st_text-center" }, h("div", { class: "st_file_icon" }, h("div", { class: "st_scb-drop-area" }, h("img", { src: "/assets/icon/arrow-pointing-up.svg" }))), h("div", { class: "st_scb-fi-default-label" }, h("slot", { name: "drop-target" }, h("p", null, this.stringsText, " ")), h("slot", { name: "text" })), this.allowClick == true ?
                h("div", { class: "st_file-upload" }, h("slot", { name: "dialog-trigger" }, h("label", { class: "st_file-upload__label" }, "Choose", this.allowMultiple == true ? " Files" : " File")), h("input", { id: "upload", class: "st_file-upload__input", type: "file", onChange: function (e) { return _this.handleChange(e); }, accept: this.accept.toString(), multiple: multiple }))
                : null, h("div", { class: "st_scb-fi-default-error" }, this.error.map(function (err) { return h("p", { class: "error_one" }, h("img", { src: "/assets/icon/error-triangle.svg" }), err, " "); })))))
        ]);
    };
    Object.defineProperty(AppChooser, "is", {
        get: function () { return "cwc-file-chooser"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppChooser, "properties", {
        get: function () {
            return {
                "accept": {
                    "type": "Any",
                    "attr": "accept"
                },
                "allowClick": {
                    "type": Boolean,
                    "attr": "allow-click"
                },
                "allowDrop": {
                    "type": Boolean,
                    "attr": "allow-drop"
                },
                "allowMultiple": {
                    "type": Boolean,
                    "attr": "allow-multiple"
                },
                "error": {
                    "state": true
                },
                "stringsText": {
                    "state": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppChooser, "events", {
        get: function () {
            return [{
                    "name": "filesChosen",
                    "method": "filesChosen",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppChooser, "style", {
        get: function () { return "/**style-placeholder:cwc-file-chooser:**/"; },
        enumerable: true,
        configurable: true
    });
    return AppChooser;
}());
var AppRoot = /** @class */ (function () {
    function AppRoot() {
        this.files = [];
        this.filesList = [];
        this.note = "Uploads List";
        this.refreshState = false;
    }
    AppRoot.prototype.errors = function (e) {
        console.log(e);
    };
    AppRoot.prototype.onFilesChosen = function (event) {
        this.files = event.detail;
        for (var i = 0; i < this.files.length; i++) {
            var file = this.files[i];
            file['uploadObj'] = null;
            this.filesList = this.filesList.concat([file]);
        }
    };
    AppRoot.prototype.onError = function (e) {
        console.log(e.detail);
    };
    AppRoot.prototype.onSave = function (e) {
        console.log(e.detail);
    };
    AppRoot.prototype.onprogress = function (e) {
        console.log("Progresssss");
        console.log(e);
    };
    AppRoot.prototype.onCancel = function (e) {
        var index = this.filesList.findIndex(function (x) { return x.name == e.detail.name && x.size == e.detail.size; });
        if (index > -1) {
            this.filesList.splice(index, 1);
        }
        this.refreshState = !this.refreshState;
    };
    AppRoot.prototype.componentDidLoad = function () {
    };
    AppRoot.prototype.getFilesFromStorage = function () {
    };
    AppRoot.prototype.render = function () {
        var _this = this;
        this.getFilesFromStorage();
        return (h("div", null, h("div", { class: "st_mainPage" }, h("cwc-file-chooser", { allowDrop: true, allowClick: true, allowMultiple: true }), h("div", { class: "st_container" }, h("div", { class: "st_content_align_center" }, h("div", { class: "st_uploaded_file st_w_100 st_text-center" }, h("div", { class: "uploaded_images" }, h("div", { class: "st_row" }, this.filesList.length > 0 ?
            this.filesList.map(function (file) { return h("cwc-upload-item", { fileProvided: file, endpoint: "https://master.tus.io/files/", file: "Blob", upload: true, value: _this.note }); })
            : "No files Added"))))))));
    };
    Object.defineProperty(AppRoot, "is", {
        get: function () { return "cwc-file-root"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppRoot, "properties", {
        get: function () {
            return {
                "errors": {
                    "method": true
                },
                "files": {
                    "state": true
                },
                "filesList": {
                    "state": true
                },
                "note": {
                    "state": true
                },
                "refreshState": {
                    "state": true
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppRoot, "events", {
        get: function () {
            return [{
                    "name": "allFiles",
                    "method": "allFiles",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppRoot, "listeners", {
        get: function () {
            return [{
                    "name": "filesChosen",
                    "method": "onFilesChosen"
                }, {
                    "name": "errors",
                    "method": "onError"
                }, {
                    "name": "save",
                    "method": "onSave"
                }, {
                    "name": "progress",
                    "method": "onprogress"
                }, {
                    "name": "cancelEvent",
                    "method": "onCancel"
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppRoot, "style", {
        get: function () { return "/**style-placeholder:cwc-file-root:**/"; },
        enumerable: true,
        configurable: true
    });
    return AppRoot;
}());
var AppUploader = /** @class */ (function () {
    function AppUploader() {
        this.endpoint = "";
        this.file = "Blob";
        this.upload = true;
        this.value = "";
        this.errors = [];
        this.refreshState = false;
    }
    AppUploader.prototype.componentDidLoad = function () {
        if (this.fileProvided.uploadObj) {
            this.uploadObj = this.fileProvided.uploadObj;
            this.uploadObj.abort();
            console.log(this.uploadObj);
            this.currentFile = this.uploadObj.file;
            this.currentFile.uploadObj = null;
            this.uploader(this.uploadObj.file);
        }
        else {
            this.init(this.fileProvided);
        }
    };
    AppUploader.prototype.init = function (file) {
        file['pause'] = false;
        file['uploaded'] = false;
        file['progress'] = { bytesUploaded: 0, bytesTotal: file.size, percentage: "0%" };
        file['id'] = Date.now().toString() + file.name;
        this.currentFile = file;
        this.placeholderImage(file, file.type);
        if (this.upload == true) {
            this.startUploads();
        }
        else {
            this.currentFile.pause = true;
            this.uploader(this.currentFile);
        }
    };
    AppUploader.prototype.startUploads = function () {
        this.upload = true;
        this.uploader(this.currentFile);
    };
    AppUploader.prototype.uploader = function (file) {
        var self = this;
        this.uploadObj = new tus.Upload(file, {
            endpoint: this.endpoint,
            retryDelays: [0, 1000, 3000, 5000, 60000, 120000],
            metadata: {
                filename: file.name,
                filetype: file.type
            },
            onError: function (error) {
                self.errorHandler(error);
            },
            onProgress: function (bytesUploaded, bytesTotal) {
                var percentage = (Math.round((bytesUploaded * 100) / bytesTotal)).toString() + "%";
                self.progressHandler(percentage);
            },
            onSuccess: function () {
                self.uploadSuccess();
            }
        });
        if (file.pause == false) {
            this.uploadObj.start();
        }
        this.save.emit(this.uploadObj);
    };
    AppUploader.prototype.progressHandler = function (percentage) {
        this.currentFile.progress.percentage = percentage;
        this.refreshState = !this.refreshState;
        this.progress.emit(this.currentFile);
    };
    AppUploader.prototype.uploadSuccess = function () {
        this.currentFile.uploaded = true;
        this.refreshState = !this.refreshState;
    };
    AppUploader.prototype.errorHandler = function (error) {
        var _this = this;
        console.log(error);
        this.currentFile.pause = true;
        this.refreshState = !this.refreshState;
        this.errors = this.errors.concat([error]);
        var timer;
        clearInterval(timer);
        timer = setTimeout(function () {
            _this.errors = [];
        }, 30000);
        this.error.emit(this.errors);
    };
    AppUploader.prototype.resumeAbortUploading = function () {
        if (this.upload == true) {
            this.currentFile.pause = !this.currentFile.pause;
            if (this.currentFile.pause == true) {
                this.uploadObj.abort();
            }
            else {
                this.uploadObj.start();
            }
        }
        else {
            this.currentFile.pause = false;
            this.uploader(this.currentFile);
        }
        this.refreshState = !this.refreshState;
    };
    AppUploader.prototype.cancelUpload = function () {
        this.uploadObj.abort();
        this.refreshState = !this.refreshState;
        this.cancelEvent.emit(this.currentFile);
    };
    AppUploader.prototype.placeholderImage = function (file, type) {
        var first = type.split('/')[0];
        if (first == "image") {
            this.getBase64(file);
        }
        else {
            this.currentFile.src = "https://svn.alfresco.com/repos/alfresco-open-mirror/alfresco/HEAD/root/projects/repository/config/alfresco/thumbnail/thumbnail_placeholder_256.png";
        }
    };
    AppUploader.prototype.getBase64 = function (file) {
        var reader = new FileReader();
        reader.readAsDataURL(file);
        var self = this;
        reader.onload = function () {
            self.currentFile.src = reader.result;
        };
        reader.onerror = function (error) {
            console.log(error);
        };
    };
    AppUploader.prototype.render = function () {
        var _this = this;
        var resumeButton = "<img src='/assets/icon/upload-button.svg' >";
        var pauseButton = "<img src='/assets/icon/pause.svg'/>";
        var check = "<img src='/assets/icon/checked.svg' />";
        return (h("div", { class: "st_wid_100" }, this.currentFile ?
            h("div", { class: "st_allContent" }, h("div", null, this.endpoint == "" ? "No endpoint given." : this.upload == false ? "Ready to upload" :
                null), h("slot", { name: "file-preview" }, h("div", { class: "st_image" }, h("img", { src: this.currentFile.src, class: "st_wid_100" }), this.errors[0] ? h("div", { class: "overlay_error" }, " ", this.errors[0], " ") : null)), h("div", { class: "st_barVDOcancel st_w_100" }, h("div", { class: "st_row st_bg" }, h("div", { class: "st_wid_15 tick" }, this.currentFile.uploaded == true ?
                h("a", { class: "st_closeBtn", innerHTML: check })
                : this.currentFile.pause == true ?
                    h("a", { class: "st_closeBtn", innerHTML: resumeButton, onClick: function () { return _this.resumeAbortUploading(); } }, " ")
                    : h("a", { class: "st_closeBtn", innerHTML: pauseButton, onClick: function () { return _this.resumeAbortUploading(); } })), h("div", { class: "st_right_sec" }, h("div", { class: "file_name" }, h("p", { class: "upload-name" }, "  ", this.currentFile.name.slice(0, 15)), h("div", { class: "st_wid_18" }, h("a", { class: "fnt-14" }, this.currentFile.progress.percentage))), h("div", { class: "st_wid_52" }, h("slot", { name: "progress" }, h("div", { class: "st_progress-bar" }, h("div", { class: "st_loaded", style: { width: (this.currentFile.progress.percentage) } })))), h("div", { class: "st_wid_15 cancel", onClick: function () { return _this.cancelUpload(); } }, h("slot", { name: "cancel-Button" }, h("a", { class: "st_closeBtn" }, h("img", { src: "/assets/icon/close-circle.svg" })))), h("p", null, this.errors[0], " ")))))
            : null));
    };
    Object.defineProperty(AppUploader, "is", {
        get: function () { return "cwc-upload-item"; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppUploader, "properties", {
        get: function () {
            return {
                "currentFile": {
                    "state": true
                },
                "endpoint": {
                    "type": "Any",
                    "attr": "endpoint"
                },
                "errors": {
                    "state": true
                },
                "file": {
                    "type": String,
                    "attr": "file"
                },
                "fileProvided": {
                    "type": "Any",
                    "attr": "file-provided"
                },
                "refreshState": {
                    "state": true
                },
                "upload": {
                    "type": Boolean,
                    "attr": "upload",
                    "mutable": true
                },
                "uploadObj": {
                    "state": true
                },
                "value": {
                    "type": String,
                    "attr": "value"
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppUploader, "events", {
        get: function () {
            return [{
                    "name": "error",
                    "method": "error",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }, {
                    "name": "cancelEvent",
                    "method": "cancelEvent",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }, {
                    "name": "progress",
                    "method": "progress",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }, {
                    "name": "save",
                    "method": "save",
                    "bubbles": true,
                    "cancelable": true,
                    "composed": true
                }];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AppUploader, "style", {
        get: function () { return "/**style-placeholder:cwc-upload-item:**/"; },
        enumerable: true,
        configurable: true
    });
    return AppUploader;
}());
export { AppChooser as CwcFileChooser, AppRoot as CwcFileRoot, AppUploader as CwcUploadItem };
