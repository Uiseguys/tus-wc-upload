{"moduleFile":{"sourceFilePath":"/home/users/ajayveer/Music/stencil/my-app/src/components/file-uploader/file-uploader.tsx","localImports":[],"externalImports":["@stencil/core","@uppy/core","@uppy/dashboard","@uppy/tus","@uppy/xhr-upload","module","tus-js-client"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"cwc-upload-item","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/users/ajayveer/Music/stencil/my-app/src/components/file-uploader/file-uploader.css","cmpRelativePath":"file-uploader.css","originalComponentPath":"file-uploader.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AppProfile","documentation":"","type":"typeof AppProfile"},"encapsulationMeta":0,"componentClass":"AppProfile","membersMeta":{"files":{"memberType":16},"error":{"memberType":16},"uploadsList":{"memberType":16},"fileProvided":{"memberType":1,"attribName":"file-provided","attribType":{"text":"any[]","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"fileProvided","documentation":"","type":"any[]"}},"serverAddress":{"memberType":1,"attribName":"server-address","attribType":{"text":"String","optional":false,"typeReferences":{"String":{"referenceLocation":"global"}}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"serverAddress","documentation":"","type":"String"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":false,"hasSvg":false,"jsFilePath":"/home/users/ajayveer/Music/stencil/my-app/src/components/file-uploader/file-uploader.js"},"jsText":"export class AppProfile {\r\n    constructor() {\r\n        this.fileProvided = [];\r\n        this.serverAddress = \"\";\r\n        this.files = [];\r\n        this.error = [];\r\n        this.uploadsList = [];\r\n    }\r\n    componentDidLoad() {\r\n        if (this.fileProvided)\r\n            console.log(this.fileProvided);\r\n    }\r\n    init(e) {\r\n        for (let i = 0; i < e.target.files.length; i++) {\r\n            var file = e.target.files[i];\r\n            file['pause'] = false;\r\n            file['uploaded'] = false;\r\n            file['progress'] = { bytesUploaded: 0, bytesTotal: file.size, percentage: \"0%\" };\r\n            file['nonUppy'] = true;\r\n            file['id'] = file.name;\r\n            this.files = [...this.files, file];\r\n            let self = this;\r\n            let upload = new tus.Upload(file, {\r\n                endpoint: this.serverAddress,\r\n                retryDelays: [0, 1000, 3000, 5000],\r\n                metadata: {\r\n                    filename: file.name,\r\n                    filetype: file.type\r\n                },\r\n                onError: function (error) {\r\n                    self.error = [...self.error, error.message];\r\n                    upload.start();\r\n                    console.log(\"Failed because: \" + error);\r\n                },\r\n                onProgress: function (bytesUploaded, bytesTotal) {\r\n                    var percentage = (Math.round((bytesUploaded * 100) / bytesTotal) + \"%\").toString();\r\n                    // console.log(file)\r\n                    let index = self.files.findIndex(x => x.id == file.id);\r\n                    if (index > -1) {\r\n                        self.files[index].progress.bytesUploaded = bytesUploaded;\r\n                        self.files[index].progress.percentage = percentage;\r\n                    }\r\n                },\r\n                onSuccess: function () {\r\n                    let index = self.files.findIndex(x => x.id == file.id);\r\n                    if (index > -1) {\r\n                        self.files[index].uploaded = true;\r\n                    }\r\n                }\r\n            });\r\n            // console.log(tus)\r\n            this.upload = [...this.upload, upload];\r\n            console.log(this.upload);\r\n            upload.start();\r\n            // Start the upload\r\n            // upload.abort()\r\n        }\r\n    }\r\n    uploadSuccess() {\r\n        // this.uppy.on('upload-success', (file, uploadURL) => {\r\n        //   console.log(file)\r\n        //   let index = this.files.findIndex(x => x.id == file.id);\r\n        //   if (index > -1) {\r\n        //     this.files[index].uploaded = true;\r\n        //   }\r\n        //   if (uploadURL.file.type == \"image/png\" ||\r\n        //     uploadURL.file.type == \"image/jpg\" ||\r\n        //     uploadURL.file.type == \"image/jpeg\" ||\r\n        //     uploadURL.file.type == \"image/svg\") {\r\n        //     var img = document.createElement(\"img\")\r\n        //     img.src = uploadURL.url;\r\n        //     let body = document.getElementById(\"image-list\")\r\n        //     body.appendChild(img)\r\n        //   }\r\n        // })\r\n    }\r\n    errorHandler() {\r\n        // let timer;\r\n        // this.uppy.on('info-visible', () => {\r\n        //   const info = this.uppy.getState().info;\r\n        //   clearInterval(timer)\r\n        //   this.error = [...this.error, info.message]\r\n        // })\r\n        // this.uppy.on('upload-error', (error) => {\r\n        //   clearInterval(timer)\r\n        //   this.error = [...this.error, error]\r\n        // })\r\n        // timer = setInterval(() => {\r\n        //   this.error = [];\r\n        // }, 3000)\r\n    }\r\n    playPauseDownloading(file, i) {\r\n        if (file) { }\r\n        this.files[i].pause = !this.files[i].pause;\r\n        if (this.files[i].pause == true) {\r\n            this.upload[i].abort();\r\n        }\r\n        else {\r\n            this.upload[i].start();\r\n        }\r\n    }\r\n    render() {\r\n        var resumeButton = \"<img src='/assets/icon/play.png' >\";\r\n        var pauseButton = \"<img src='/assets/icon/pause-512.png'/>\";\r\n        var check = \"<img src='/assets/icon/checkmark-png-28.png' />\";\r\n        return (h(\"div\", { class: \"cwc-upload-item\" },\r\n            this.files.map((file, i) => h(\"div\", { class: \"progress-list\" },\r\n                h(\"div\", { class: \"file-name\" }, file.name),\r\n                h(\"div\", { id: \"myProgress\" },\r\n                    h(\"div\", { style: { width: file.progress.percentage } })),\r\n                file.uploaded ?\r\n                    h(\"div\", { class: \"progress-footer\" },\r\n                        h(\"button\", { class: \"play-pause-btn\", innerHTML: check }),\r\n                        h(\"span\", null, \"Complete\"))\r\n                    :\r\n                        h(\"div\", { class: \"progress-footer\" },\r\n                            h(\"button\", { class: \"play-pause-btn\", onClick: () => this.playPauseDownloading(file, i), innerHTML: file.pause == true ? resumeButton : pauseButton }),\r\n                            h(\"span\", null,\r\n                                \" \",\r\n                                file.pause == true ? \"Paused\" : \"Uploading\",\r\n                                \" : \",\r\n                                file.progress.percentage)))),\r\n            h(\"ul\", null, this.error.map((err) => h(\"li\", null, err))),\r\n            h(\"div\", { id: \"image-list\" })));\r\n    }\r\n    static get is() { return \"cwc-upload-item\"; }\r\n    static get properties() { return {\r\n        \"error\": {\r\n            \"state\": true\r\n        },\r\n        \"fileProvided\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"file-provided\"\r\n        },\r\n        \"files\": {\r\n            \"state\": true\r\n        },\r\n        \"serverAddress\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"server-address\"\r\n        },\r\n        \"uploadsList\": {\r\n            \"state\": true\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:cwc-upload-item:**/\"; }\r\n}\r\n"}