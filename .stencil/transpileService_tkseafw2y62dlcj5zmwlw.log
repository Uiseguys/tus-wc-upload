{"moduleFile":{"sourceFilePath":"/home/users/ajayveer/Music/stencil/my-app/src/components/file-chooser/file-chooser.tsx","localImports":[],"externalImports":["@stencil/core"],"potentialCmpRefs":[],"cmpMeta":{"tagNameMeta":"file-chooser","stylesMeta":{"$":{"externalStyles":[{"absolutePath":"/home/users/ajayveer/Music/stencil/my-app/src/components/file-chooser/file-chooser.css","cmpRelativePath":"file-chooser.css","originalComponentPath":"file-chooser.css"}]}},"assetsDirsMeta":[],"hostMeta":{},"dependencies":[],"jsdoc":{"name":"AppHome","documentation":"","type":"typeof AppHome"},"encapsulationMeta":1,"componentClass":"AppHome","membersMeta":{"el":{"memberType":64},"element":{"memberType":16},"files":{"memberType":1,"attribName":"files","attribType":{"text":"any[]","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":0,"jsdoc":{"name":"files","documentation":"","type":"any[]"}},"maxFiles":{"memberType":1,"attribName":"max-files","attribType":{"text":"number","optional":false},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"maxFiles","documentation":"","type":"number"}},"nodrop":{"memberType":1,"attribName":"nodrop","attribType":{"text":"boolean","optional":false},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"nodrop","documentation":"","type":"boolean"}},"noAuto":{"memberType":1,"attribName":"no-auto","attribType":{"text":"boolean","optional":false},"reflectToAttrib":false,"propType":4,"jsdoc":{"name":"noAuto","documentation":"","type":"boolean"}},"accept":{"memberType":1,"attribName":"accept","attribType":{"text":"string","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"accept","documentation":"","type":"string"}},"maxFileSize":{"memberType":1,"attribName":"max-file-size","attribType":{"text":"number","optional":false},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"maxFileSize","documentation":"","type":"number"}},"method":{"memberType":1,"attribName":"method","attribType":{"text":"string","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"method","documentation":"","type":"string"}},"target":{"memberType":1,"attribName":"target","attribType":{"text":"string","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"target","documentation":"","type":"string"}},"timeout":{"memberType":1,"attribName":"timeout","attribType":{"text":"number","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":8,"jsdoc":{"name":"timeout","documentation":"","type":"number"}},"headers":{"memberType":1,"attribName":"headers","attribType":{"text":"string","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"headers","documentation":"","type":"string"}},"formDataName":{"memberType":1,"attribName":"form-data-name","attribType":{"text":"string","optional":false,"typeReferences":{}},"reflectToAttrib":false,"propType":2,"jsdoc":{"name":"formDataName","documentation":"","type":"string"}}},"eventsMeta":[],"listenersMeta":[]},"hasSlot":true,"hasSvg":false,"jsFilePath":"/home/users/ajayveer/Music/stencil/my-app/src/components/file-chooser/file-chooser.js"},"jsText":"// import { BootstrapThemeColor } from '../../common/index';\r\nexport class AppHome {\r\n    constructor() {\r\n        this.files = [];\r\n        // @Prop() type: BootstrapThemeColor = 'primary';\r\n        this.maxFiles = 1;\r\n        this.nodrop = false;\r\n        this.noAuto = false;\r\n        this.maxFileSize = 0;\r\n    }\r\n    componentWillLoad() {\r\n        this.element = this.el;\r\n        const that = this;\r\n        this.element.uploadFiles = () => {\r\n            that.uploadFiles();\r\n        };\r\n    }\r\n    componentDidLoad() {\r\n        const dropArea = this.el.querySelector('.scb-fi-wrapper');\r\n        dropArea.addEventListener('dragenter', this.preventDefaults, false);\r\n        dropArea.addEventListener('dragleave', this.preventDefaults, false);\r\n        dropArea.addEventListener('dragover', this.preventDefaults, false);\r\n        dropArea.addEventListener('drop', this.onDrop.bind(this), false);\r\n        this.onHidePreview = this.hidePreview.bind(this);\r\n        this.onShowPreview = this.showPreview.bind(this);\r\n    }\r\n    preventDefaults(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n    }\r\n    /**\r\n     * Fire hidden input click event on Button click\r\n     */\r\n    openFileInput() {\r\n        const hiddenInput = this.el.getElementsByClassName('scb-fi-hidden')[0];\r\n        hiddenInput.click();\r\n    }\r\n    /**\r\n     * Remove the file from files list and aborting all pending actions about it\r\n     * @param {number} index - index of a file in a list\r\n     */\r\n    removeFile(index) {\r\n        const files = this.element.files;\r\n        const file = files[index];\r\n        if (file.reading) {\r\n            file.fileReader.abort();\r\n        }\r\n        if (file.uploading) {\r\n            file.xhr.abort();\r\n        }\r\n        files.splice(index, 1);\r\n        this.element.files = [];\r\n        setTimeout(() => this.element.files = [...files]);\r\n        if (!files.length) {\r\n            this.initUploadStyle();\r\n        }\r\n        // console.log(this.cancelDefaultDragEnter);\r\n        // console.log(this.cancelDefaultDragOver);\r\n        // console.log(this.onDrop);\r\n    }\r\n    /**\r\n     * Retry the upload action for a single file\r\n     * @param {number} index - index of a file in a list\r\n     */\r\n    retryUpload(index) {\r\n        const file = this.element.files[index];\r\n        if (this.isLoadingAborted) {\r\n            this.uploadFile(file);\r\n        }\r\n    }\r\n    /**\r\n     * Manually upload files\r\n     */\r\n    uploadFiles() {\r\n        this.files.forEach(file => file.isRead && this.uploadFile(file));\r\n    }\r\n    /**\r\n     * Check if loading of a file was aborted\r\n     * @param {Object} file - file object\r\n     * @returns {boolean}\r\n     */\r\n    isLoadingAborted(file) {\r\n        return (Boolean)(file.uploadEnded && file.loadStatus !== 100);\r\n    }\r\n    // @Listen('dragenter')\r\n    // /**\r\n    //  * Cancel default Drag Enter event\r\n    //  * @param {Object} event - dragenter event\r\n    //  * @returns {boolean}\r\n    //  */\r\n    // private cancelDefaultDragEnter(event): boolean {\r\n    //     console.log(event);\r\n    //     event.preventDefault();\r\n    //     return false;\r\n    // }\r\n    // @Listen('dragover')\r\n    // /**\r\n    //  * Cancel default Drag Over event\r\n    //  * @param {Object} event - dragover event\r\n    //  * @returns {boolean}\r\n    //  */\r\n    // private cancelDefaultDragOver(event): boolean {\r\n    //     console.log(event);\r\n    //     event.preventDefault();\r\n    //     return false;\r\n    // }\r\n    // @Listen('drop')\r\n    /**\r\n     * Trigger addFiles function on drop event\r\n     * @param {Object} event - drop event\r\n     * @returns {boolean}\r\n     */\r\n    onDrop(e) {\r\n        this.preventDefaults(e);\r\n        if (!this.nodrop) {\r\n            const dt = e.dataTransfer;\r\n            this.addFiles(dt.files);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Handle the file select event\r\n     * @param {Object} event - Files select event\r\n     */\r\n    onFileSelect(event) {\r\n        this.addFiles(event.target.files);\r\n        event.target.value = '';\r\n    }\r\n    /**\r\n     * Validate, add files to files list and read them\r\n     * @param {Array} files\r\n     */\r\n    addFiles(files) {\r\n        const diff = this.maxFiles - this.element.files.length;\r\n        if (files.length > 0 && (this.maxFiles === 0 || diff > 0)) {\r\n            const lastSelectedFiles = this.element.files;\r\n            const filesArray = [];\r\n            this.element.files = [];\r\n            for (const item of files) {\r\n                if (this.isAcceptedFileType(item) && this.isPassedFileSize(item)) {\r\n                    filesArray.push(item);\r\n                }\r\n            }\r\n            if (this.maxFiles > 0 && filesArray.length > diff) {\r\n                filesArray.length = diff;\r\n            }\r\n            filesArray.forEach((file, i) => {\r\n                file.elemId = 'file' + i + Date.now();\r\n            });\r\n            setTimeout(() => this.element.files = [...lastSelectedFiles, ...filesArray]);\r\n            filesArray.forEach(file => this.readFile(file));\r\n        }\r\n    }\r\n    initProgress() {\r\n        const dropAreaEl = this.el.querySelector('.scb-drop-area');\r\n        dropAreaEl.classList.add('loading');\r\n        const progressEl = this.el.querySelector('.progress-circle');\r\n        progressEl.classList.remove('no-loading');\r\n        const fileButtonEl = this.el.querySelector('.scb-fi-button-wrapper');\r\n        fileButtonEl.classList.add('loading');\r\n        const labelEl = this.el.querySelector('.scb-fi-label');\r\n        labelEl.classList.add('loading');\r\n    }\r\n    initUploadStyle() {\r\n        const progressEl = this.el.querySelector('.progress-circle');\r\n        progressEl.classList.add('no-loading');\r\n        progressEl.querySelector('span.img-checked').classList.add('in-progress');\r\n        progressEl.dataset.percentage = '0';\r\n        const detailEl = progressEl.querySelector('.current-percentage');\r\n        detailEl.innerHTML = '';\r\n        const dropAreaEl = this.el.querySelector('.scb-drop-area');\r\n        dropAreaEl.classList.remove('loading');\r\n        const fileButtonEl = this.el.querySelector('.scb-fi-button-wrapper');\r\n        fileButtonEl.classList.remove('loading');\r\n        const labelEl = this.el.querySelector('.scb-fi-label');\r\n        labelEl.classList.remove('loading');\r\n        const wrapperEl = this.el.querySelector('.scb-fi-wrapper');\r\n        wrapperEl.removeEventListener('mouseleave', this.onShowPreview);\r\n        const previewEl = this.el.querySelector('.image-preview');\r\n        previewEl.removeEventListener('mouseover', this.onHidePreview);\r\n        previewEl.classList.add('hidden');\r\n        previewEl.style['background-image'] = '';\r\n    }\r\n    /**\r\n     * Check if file is accepted type\r\n     * @param {Object} file\r\n     * @returns {boolean}\r\n     */\r\n    isAcceptedFileType(file) {\r\n        if (!this.accept) {\r\n            return true;\r\n        }\r\n        const fileName = file.name.match(/\\.[^\\.]*$|$/)[0];\r\n        const template = new RegExp('^(' + this.accept.replace(/[, ]+/g, '|').replace(/\\/\\*/g, '/.*') + ')$', 'i');\r\n        return template.test(file.type) || template.test(fileName);\r\n    }\r\n    /**\r\n     * Check if file is accepted size\r\n     * @param {Object} file\r\n     * @returns {boolean}\r\n     */\r\n    isPassedFileSize(file) {\r\n        return !this.maxFileSize || file.size <= this.maxFileSize;\r\n    }\r\n    /**\r\n     * Change the Retry button state\r\n     * @param {Object} file\r\n     */\r\n    toggleRetryBtn(file) {\r\n        const retryBtn = this.el.querySelector('#' + file.elemId + ' .scb-fi-retry-btn');\r\n        const isAborted = this.isLoadingAborted(file);\r\n        if (retryBtn) {\r\n            retryBtn.classList.toggle('d-inline-block', isAborted);\r\n        }\r\n    }\r\n    /**\r\n     * Read file after add\r\n     * @param {Object} file\r\n     */\r\n    readFile(file) {\r\n        this.initProgress();\r\n        const reader = new FileReader();\r\n        const isRequestDataPresent = this.method && this.target && this.formDataName;\r\n        this.changeFileUploadProgress(file, 0, 'Start reading');\r\n        reader.onprogress = (e) => {\r\n            const percentage = Math.round(e.loaded / e.total * 100);\r\n            this.changeFileUploadProgress(file, percentage, 'Reading');\r\n        };\r\n        reader.onloadend = () => {\r\n            this.toggleRetryBtn(file);\r\n        };\r\n        reader.onload = () => {\r\n            file.reading = false;\r\n            file.isRead = true;\r\n            this.changeFileUploadProgress(file, 100, isRequestDataPresent ? 'Queued' : '');\r\n            if (isRequestDataPresent && !this.noAuto) {\r\n                this.uploadFile(file);\r\n            }\r\n        };\r\n        file.reading = true;\r\n        reader.readAsDataURL(file);\r\n        file.fileReader = reader;\r\n    }\r\n    /**\r\n     * Upload file after read or retry button click\r\n     * @param {Object} file\r\n     */\r\n    uploadFile(file) {\r\n        if (!file.uploading) {\r\n            const request = new XMLHttpRequest;\r\n            let stalledTimeout;\r\n            file.xhr = request;\r\n            request.upload.onprogress = (e) => {\r\n                clearTimeout(stalledTimeout);\r\n                const loaded = e.loaded;\r\n                const total = e.total;\r\n                const progress = Math.round(100 * (loaded / total));\r\n                file.loaded = loaded;\r\n                file.indeterminate = 0 >= loaded || loaded >= total;\r\n                if (file.error) {\r\n                    file.status = '';\r\n                    file.indeterminate = undefined;\r\n                }\r\n                else if (!file.abort) {\r\n                    if (100 > progress) {\r\n                        stalledTimeout = setTimeout(() => {\r\n                            this.changeFileUploadProgress(file, progress, 'Stalled');\r\n                        }, 2000);\r\n                    }\r\n                    else {\r\n                        file.uploading = false;\r\n                    }\r\n                    this.changeFileUploadProgress(file, progress, 'Uploading');\r\n                    this.el.dispatchEvent(new CustomEvent('upload-progress', {\r\n                        detail: {\r\n                            file: file,\r\n                            xhr: request,\r\n                        },\r\n                    }));\r\n                }\r\n            };\r\n            request.onreadystatechange = () => {\r\n                if (request.readyState === 4) {\r\n                    clearTimeout(stalledTimeout);\r\n                    file.indeterminate = file.uploading = false;\r\n                    if (file.abort) {\r\n                        this.changeFileUploadProgress(file, file.loadStatus, 'Aborted');\r\n                    }\r\n                    else {\r\n                        const uploadResponseNotCanceled = this.el.dispatchEvent(new CustomEvent('upload-response', {\r\n                            detail: {\r\n                                file: file,\r\n                                xhr: request,\r\n                            },\r\n                            cancelable: true,\r\n                        }));\r\n                        if (!uploadResponseNotCanceled) {\r\n                            return;\r\n                        }\r\n                        if (request.status === 0) {\r\n                            file.error = 'Server unavailable';\r\n                        }\r\n                        else if (request.status >= 500) {\r\n                            file.error = 'Unexpected server error';\r\n                        }\r\n                        else if (request.status >= 400) {\r\n                            file.error = 'Forbidden';\r\n                        }\r\n                        file.complete = false;\r\n                        this.el.dispatchEvent(new CustomEvent('upload-' + (file.error ? 'error' : 'success'), {\r\n                            detail: {\r\n                                file: file,\r\n                                xhr: request,\r\n                            },\r\n                        }));\r\n                        const loadedPercentage = file.error ? file.loadStatus : 100;\r\n                        const uploadStatus = file.error ? ('Error: ' + file.error) : '';\r\n                        this.changeFileUploadProgress(file, loadedPercentage, uploadStatus);\r\n                        file.uploadEnded = true;\r\n                        file.uploaded = !file.error;\r\n                    }\r\n                }\r\n            };\r\n            request.upload.onloadstart = () => {\r\n                this.el.dispatchEvent(new CustomEvent('upload-start', {\r\n                    detail: {\r\n                        file: file,\r\n                        xhr: request,\r\n                    },\r\n                }));\r\n            };\r\n            request.upload.onloadend = () => {\r\n                file.uploadEnded = true;\r\n                this.toggleRetryBtn(file);\r\n            };\r\n            const uploadBeforeNotCanceled = this.el.dispatchEvent(new CustomEvent('upload-before', {\r\n                detail: {\r\n                    file: file,\r\n                    xhr: request,\r\n                },\r\n                cancelable: true,\r\n            }));\r\n            if (!uploadBeforeNotCanceled) {\r\n                return;\r\n            }\r\n            const formData = new FormData;\r\n            file.uploadTarget = this.target || '';\r\n            file.formDataName = this.formDataName;\r\n            this.changeFileUploadProgress(file, 0, 'Start uploading');\r\n            formData.append(file.formDataName, file, file.name);\r\n            request.open(this.method, file.uploadTarget, true);\r\n            this.configureXhr(request);\r\n            file.indeterminate = true;\r\n            file.uploading = true;\r\n            file.uploadEnded = false;\r\n            file.complete = file.abort = file.error = file.held = false;\r\n            const uploadRequestNotCanceled = this.el.dispatchEvent(new CustomEvent('upload-request', {\r\n                detail: {\r\n                    file: file,\r\n                    xhr: request,\r\n                    formData: formData,\r\n                },\r\n                cancelable: true,\r\n            }));\r\n            if (uploadRequestNotCanceled) {\r\n                request.send(formData);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Setup the XHR Request\r\n     * @param {Object} request - upload request\r\n     */\r\n    configureXhr(request) {\r\n        let headers;\r\n        if (typeof this.headers === 'string') {\r\n            try {\r\n                headers = JSON.parse(this.headers.replace(new RegExp('\\'', 'g'), '\\\"'));\r\n            }\r\n            catch (error) {\r\n                headers = undefined;\r\n            }\r\n        }\r\n        for (const header in headers) {\r\n            if (header) {\r\n                request.setRequestHeader(header, headers[header]);\r\n            }\r\n        }\r\n        if (this.timeout) {\r\n            request.timeout = this.timeout;\r\n        }\r\n    }\r\n    /**\r\n     * Show the upload progress of a file\r\n     * @param {Object} file\r\n     * @param {number} loadedPercentage\r\n     * @param {string} status\r\n     */\r\n    changeFileUploadProgress(file, loadedPercentage, status) {\r\n        const isCircularProgres = true;\r\n        if (isCircularProgres) {\r\n            const progressEl = this.el.querySelector('.progress-circle');\r\n            const newPercentage = String(Math.round(loadedPercentage / 10) * 10);\r\n            const currentPercentage = Number(progressEl.dataset.percentage);\r\n            if (Number(newPercentage) === 0 || currentPercentage < Number(newPercentage)) {\r\n                // fix for continuos progress\r\n                if (currentPercentage < 60) {\r\n                    progressEl.dataset.continuous = '0';\r\n                }\r\n                else {\r\n                    progressEl.dataset.continuous = '1';\r\n                }\r\n                progressEl.dataset.percentage = newPercentage;\r\n            }\r\n            const detailEl = progressEl.querySelector('.current-percentage');\r\n            const detailTextEl = progressEl.querySelector('.progress-detail');\r\n            detailEl.innerHTML = loadedPercentage + ' %';\r\n            detailTextEl.innerHTML = status;\r\n            if (loadedPercentage === 100 && (!this.target && status === 'Reading' || status === 'Uploading')) {\r\n                const self = this;\r\n                setTimeout(() => {\r\n                    if (self.element.files.length) { // if file don't remove yet\r\n                        progressEl.dataset.percentage = '0';\r\n                        detailEl.innerHTML = '';\r\n                        const imgCheckedEl = progressEl.querySelector('span.img-checked.in-progress');\r\n                        if (imgCheckedEl) {\r\n                            imgCheckedEl.classList.remove('in-progress');\r\n                        }\r\n                    }\r\n                }, 1000);\r\n                if (/^image\\//.test(file.type)) {\r\n                    setTimeout(() => {\r\n                        if (self.element.files.length) {\r\n                            self.setPreviewMode(file);\r\n                        }\r\n                    }, 2000);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const prBar = this.el.querySelector('#' + file.elemId + ' .progress-bar');\r\n            const statusBar = this.el.querySelector('#' + file.elemId + ' .scb-fi-status');\r\n            file.loadStatus = loadedPercentage;\r\n            file.status = status;\r\n            if (prBar) {\r\n                prBar.style.width = loadedPercentage + '%';\r\n            }\r\n            if (statusBar) {\r\n                statusBar.innerHTML = file.status || '';\r\n            }\r\n        }\r\n    }\r\n    setPreviewMode(file) {\r\n        const previewEl = this.el.querySelector('.image-preview');\r\n        const wrapperEl = this.el.querySelector('.scb-fi-wrapper');\r\n        wrapperEl.classList.add('hidden');\r\n        previewEl.style['background-image'] = 'url(\"' + file.fileReader.result + '\")';\r\n        previewEl.classList.remove('hidden');\r\n        const self = this;\r\n        setTimeout(() => {\r\n            previewEl.addEventListener('mouseover', self.onHidePreview, { once: true });\r\n        }, 1000);\r\n    }\r\n    hidePreview(e) {\r\n        this.preventDefaults(e);\r\n        const previewEl = this.el.querySelector('.image-preview');\r\n        const wrapperEl = this.el.querySelector('.scb-fi-wrapper');\r\n        wrapperEl.classList.remove('hidden');\r\n        previewEl.classList.add('hidden');\r\n        wrapperEl.addEventListener('mouseleave', this.onShowPreview, { once: true });\r\n    }\r\n    showPreview(e) {\r\n        this.preventDefaults(e);\r\n        const previewEl = this.el.querySelector('.image-preview');\r\n        const wrapperEl = this.el.querySelector('.scb-fi-wrapper');\r\n        wrapperEl.classList.add('hidden');\r\n        previewEl.classList.remove('hidden');\r\n        previewEl.addEventListener('mouseover', this.onHidePreview, { once: true });\r\n    }\r\n    /**\r\n     * Render view based on the component data\r\n     * @returns view of the component\r\n     */\r\n    render() {\r\n        const buttonClasses = {\r\n            'scb-fi-default-button': true,\r\n            btn: true,\r\n            [`btn-${this.type}`]: true,\r\n            'btn-lg': true,\r\n        };\r\n        const isMultiple = this.maxFiles !== 1;\r\n        const buttonText = isMultiple ? 'Choose Files' : 'Choose File';\r\n        const dropLabel = isMultiple ? 'Drag files to upload, or' : 'Drag file to upload, or';\r\n        const label = this.nodrop ? '' : h(\"span\", { class: \"scb-fi-label\" },\r\n            h(\"slot\", { name: \"label\" }),\r\n            h(\"span\", { class: \"scb-fi-default-label\" }, dropLabel));\r\n        const buttonAttrs = {};\r\n        const inputAttrs = {};\r\n        if (this.maxFiles > 0 && this.maxFiles <= this.element.files.length) {\r\n            buttonAttrs['disabled'] = 'disabled';\r\n        }\r\n        if (isMultiple) {\r\n            inputAttrs['multiple'] = true;\r\n        }\r\n        if (this.accept) {\r\n            inputAttrs['accept'] = this.accept;\r\n        }\r\n        const svgCheckedContent = `<svg viewBox=\"0 0 17 16\" width=\"30\" height=\"30\" version=\"1.1\" \n          xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"si-glyph si-glyph-checked\">\n      <!-- Generator: Sketch 3.0.3 (7891) - http://www.bohemiancoding.com/sketch -->\n      <title>1228</title>\n      \n      <defs></defs>\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path d=\"M3.432,6.189 C3.824,5.798 4.455,5.798 4.847,6.189 L6.968,8.31 L13.147,2.131 C13.531,1.747 14.157,1.753 14.548,2.144 L16.67,4.266 C17.06,4.657 17.066,5.284 16.684,5.666 L7.662,14.687 C7.278,15.07 6.651,15.064 6.261,14.673 L1.311,9.723 C0.92,9.333 0.92,8.7 1.311,8.31 L3.432,6.189 Z\" fill=\"#007bff\" class=\"si-glyph-fill\"></path>\n      </g>\n  </svg>`;\r\n        const svgArrowContent = `<svg viewBox=\"0 0 17 17\" width=\"30\" height=\"30\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"si-glyph si-glyph-arrow-thick-up\">\n      <!-- Generator: Sketch 3.0.3 (7891) - http://www.bohemiancoding.com/sketch -->\n      <title>1211</title>\n      \n      <defs></defs>\n      <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n          <path d=\"M8.65,1.158 L3.165,7.098 C2.954,7.332 2.956,7.712 3.167,7.947 L7.035,7.952 L7.035,15.976 C7.035,16.529 7.474,16.976 8.017,16.976 L9.982,16.976 C10.525,16.976 10.964,16.529 10.964,15.976 L10.964,7.956 L14.775,7.961 C14.984,7.73 14.982,7.349 14.771,7.113 L9.414,1.159 C9.201,0.927 8.861,0.925 8.65,1.158 L8.65,1.158 Z\" fill=\"#007bff\" class=\"si-glyph-fill\"></path>\n      </g>\n  </svg>`;\r\n        /*\r\n         * Using the <fieldset> tag for having an ability to disable the custom button in <slot> that can't have disabled attribute set.\r\n         */\r\n        return ([\r\n            h(\"div\", { class: \"scb-fi-wrapper\" },\r\n                h(\"input\", Object.assign({ class: \"scb-fi-hidden\", type: \"file\", onChange: (event) => this.onFileSelect(event) }, inputAttrs)),\r\n                h(\"div\", { class: \"progress-circle no-loading\", \"data-percentage\": \"0\", \"data-continuous\": \"0\" },\r\n                    h(\"span\", { class: \"progress-left\" },\r\n                        h(\"span\", { class: \"progress-bar\" })),\r\n                    h(\"span\", { class: \"progress-right\" },\r\n                        h(\"span\", { class: \"progress-bar\" })),\r\n                    h(\"div\", { class: \"progress-value\" },\r\n                        h(\"div\", null,\r\n                            h(\"div\", { class: \"current-percentage\" }),\r\n                            h(\"div\", { class: \"progress-detail\" }),\r\n                            h(\"span\", { class: \"img-checked in-progress\", innerHTML: svgCheckedContent })))),\r\n                h(\"div\", { class: \"scb-drop-area\" },\r\n                    h(\"span\", { class: \"img-arrow\", innerHTML: svgArrowContent })),\r\n                h(\"fieldset\", Object.assign({ class: \"scb-fi-button-wrapper\", onClick: () => this.openFileInput() }, buttonAttrs),\r\n                    h(\"slot\", { name: \"button\" }),\r\n                    h(\"button\", { class: buttonClasses }, buttonText)),\r\n                label,\r\n                this.files.map((file, i) => h(\"div\", { class: \"scb-fi-row with-progress-circle\", id: file.elemId },\r\n                    h(\"div\", { class: \"scb-fi-row-header\" },\r\n                        h(\"span\", { class: \"scb-fi-name\" }, file.name),\r\n                        h(\"div\", { class: \"scb-fi-controls\" },\r\n                            h(\"button\", { class: {\r\n                                    'scb-fi-icon-btn': true,\r\n                                    'scb-fi-retry-btn': true,\r\n                                    'd-inline-block': this.isLoadingAborted(file),\r\n                                }, onClick: () => this.retryUpload(i) },\r\n                                h(\"span\", { class: \"scb-icon icon-reload\" })),\r\n                            h(\"button\", { class: \"scb-fi-icon-btn close\", onClick: () => this.removeFile(i) },\r\n                                h(\"span\", { \"aria-hidden\": \"true\" }, \"\\u00D7\")))),\r\n                    h(\"div\", { class: \"scb-fi-status\" }, file.status),\r\n                    h(\"div\", { class: \"progress\", style: { display: 'none' } },\r\n                        h(\"div\", { class: {\r\n                                'progress-bar': true,\r\n                                [`bg-${this.type}`]: true,\r\n                            }, style: { width: file.loadStatus + '%' }, role: \"progressbar\", \"aria-valuenow\": \"0\", \"aria-valuemin\": \"0\", \"aria-valuemax\": \"100\" }))))),\r\n            h(\"div\", { class: \"image-preview hidden\" })\r\n        ]);\r\n    }\r\n    static get is() { return \"file-chooser\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"accept\": {\r\n            \"type\": String,\r\n            \"attr\": \"accept\"\r\n        },\r\n        \"el\": {\r\n            \"elementRef\": true\r\n        },\r\n        \"element\": {\r\n            \"state\": true\r\n        },\r\n        \"files\": {\r\n            \"type\": \"Any\",\r\n            \"attr\": \"files\"\r\n        },\r\n        \"formDataName\": {\r\n            \"type\": String,\r\n            \"attr\": \"form-data-name\"\r\n        },\r\n        \"headers\": {\r\n            \"type\": String,\r\n            \"attr\": \"headers\"\r\n        },\r\n        \"maxFiles\": {\r\n            \"type\": Number,\r\n            \"attr\": \"max-files\"\r\n        },\r\n        \"maxFileSize\": {\r\n            \"type\": Number,\r\n            \"attr\": \"max-file-size\"\r\n        },\r\n        \"method\": {\r\n            \"type\": String,\r\n            \"attr\": \"method\"\r\n        },\r\n        \"noAuto\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"no-auto\"\r\n        },\r\n        \"nodrop\": {\r\n            \"type\": Boolean,\r\n            \"attr\": \"nodrop\"\r\n        },\r\n        \"target\": {\r\n            \"type\": String,\r\n            \"attr\": \"target\"\r\n        },\r\n        \"timeout\": {\r\n            \"type\": Number,\r\n            \"attr\": \"timeout\"\r\n        }\r\n    }; }\r\n    static get style() { return \"/**style-placeholder:file-chooser:**/\"; }\r\n}\r\n"}